from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.client_keyboard import client_keyboard
from aiogram.dispatcher.filters import Text
from inline_keyboards.client_inline_keyboards import client_inline_keyboard
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from create_bot import bot
from aiogram.types import ParseMode
from database.mysql_db import sql_name_output, sql_flavor_output, sql_product_output, \
    sql_adding_data_to_cart, content_basket, delete_data_basket, order_data, place_order_output_data


# import logging
# import time

class FSMClient(StatesGroup):
    category = State()
    name = State()
    flavor = State()
    quantity = State()
    price = None
    recipient = State()
    address = State()


# @dp.message_handler(commands=['start', 'help'])
async def start_handlers(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    print(user_name, user_id)
    # user_full_name = message.from_user.full_name
    # logging.info(f'{user_id} {user_full_name} {time.asctime()}')
    # await sql_adding_user_data_at_startup(user_id, user_name)
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=client_keyboard)
    await message.delete()


# @dp.message_handler(Text(equals='–û –Ω–∞—Å –∏ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö', ignore_case=True), state='*')
async def info(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await message.answer('–í–ª–∞–¥–µ–ª–µ—Ü: @ne_angel_reklama\n'
                         '–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞üòé—Ç–æ –≤–∞–º –æ—á–µ–Ω—å üçÄ\n'
                         '–∑–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ ü§†\n'
                         '–¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å—ë–ª–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n'
                         '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –Ω–∞—à–µ–π –Ω–µ–æ–±—ä—è—Ç–Ω–æ–π —Ä–æ–¥–∏–Ω—ã ‚ò∫Ô∏è',)
    await message.delete()


# @dp.message_handler(Text(equals='–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', ignore_case=True), state='*')
async def product_catalog(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                         reply_markup=client_inline_keyboard)

    await FSMClient.category.set()


# @dp.callback_query_handler(text='electronic_cigarettes', state=FSMClient.category)
# @dp.callback_query_handler(text='liquid', state=FSMClient.category)
async def category(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['category'] = callback.data
    print(callback.data)
    await sql_name_output(callback)
    await FSMClient.next()
    await callback.answer()


# @dp.callback_query_handler(state=FSMClient.name)
async def name(callback: types.CallbackQuery, state: FSMContext):
    if '_name' in callback.data:
        async with state.proxy() as data:
            data['name'] = callback.data[:callback.data.find("_name"):]
        await sql_flavor_output(callback, state)
        await FSMClient.next()
        await callback.answer()


# @dp.callback_query_handler(state=FSMClient.flavor)
async def flavor(callback: types.CallbackQuery, state: FSMContext):
    if '_flavor' in callback.data:
        async with state.proxy() as data:
            data['flavor'] = callback.data[:callback.data.find("_flavor"):]
        await sql_product_output(callback, state)
    else:
        async with state.proxy() as data:
            await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏:\n'
                                          f'–ñ–∏–¥–∫–æ—Å—Ç—å: *{data["name"]}*, –≤–∫—É—Å: _{data["flavor"]}_\n'
                                          f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞...',
                                          parse_mode=ParseMode.MARKDOWN)
        await FSMClient.next()
    await callback.answer()


# @dp.callback_query_handler(text='add_to_cart', state=FSMClient.quantity)
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∏–¥–∫–æ—Å—Ç—å: {data["name"]}, –≤–∫—É—Å: {data["flavor"]}\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞...')
    await FSMClient.next()


# @dp.message_handler(state=FSMClient.quantity)
async def adding_data_to_cart(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['quantity'] = int(message.text)
            print(data)
        await sql_adding_data_to_cart(message, state)
        await state.finish()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n'
                             '–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞...')


# @dp.message_handler(Text(equals='–ö–æ—Ä–∑–∏–Ω–∞'), state='*')
async def basket(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        print(current_state)
        await state.finish()
    await content_basket(message)


# @dp.callback_query_handler(text='empty_basket')
async def empty_basket(callback: types.CallbackQuery):
    await delete_data_basket(callback)
    await callback.answer()


# @dp.message_handler(Text(equals='–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', ignore_case=True), state='*')
async def ordering(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await order_data(message)


# @dp.callback_query_handler(text='place_order')
async def place_order(callback: types.CallbackQuery):
    await bot.edit_message_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (—Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ), '
        '–¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–æ–ª–µ–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, '
        '–∞ —Ç–∞–∫–∂–µ –±—ã—Å—Ç—Ä–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç–µ.',
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
    )
    await FSMClient.recipient.set()


# @dp.message_handler(state=FSMClient.recipient)
async def place_order_recipient(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['recipient'] = message.text
    await message.answer(
        '–¢–∞–∫–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.\n\n'
        '–ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ë–æ–ª—å—à–∞—è –ü–æ–ª—è–Ω–∫–∞, –¥.1, –∫–≤.10\n\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!',

    )
    await FSMClient.next()


# @dp.message_handler(state='FSMClient.address')
async def place_order_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
    await message.answer(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: *2202 2021 3226 7596* (*–î–µ–Ω–∏—Å –Æ—Ä—å–µ–≤–∏—á –¢.*) '
        '–∏–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *8 (928) 470-90-83*. '
        '–¢–∞–∫–∂–µ, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '
        '–í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n'
        '–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: '
        '8(928)470-90-83.\n\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑ –∏ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞–º!',
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton('–û–ø–ª–∞—Ç–∏–ª üí∞', callback_data='paid')
        )
    )


# @dp.callback_query_handler(text='paid', state='FSMClient.address')
async def place_order_data(callback: types.CallbackQuery, state: FSMContext):
    await place_order_output_data(callback, state)
    await callback.answer()
    await state.finish()


def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(start_handlers, commands=['start', 'help'])
    dp.register_message_handler(info, Text(equals='–û –Ω–∞—Å –∏ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö', ignore_case=True), state='*')
    dp.register_message_handler(product_catalog, Text(equals='–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', ignore_case=True), state='*')
    dp.register_callback_query_handler(category, text='electronic_cigarettes', state=FSMClient.category)
    dp.register_callback_query_handler(category, text='liquid', state=FSMClient.category)
    dp.register_callback_query_handler(name, state=FSMClient.name)
    dp.register_callback_query_handler(flavor, state=FSMClient.flavor)
    dp.register_callback_query_handler(add_to_cart, text='add_to_cart', state=FSMClient.flavor)
    dp.register_message_handler(adding_data_to_cart, state=FSMClient.quantity)
    dp.register_message_handler(basket, Text(equals='–ö–æ—Ä–∑–∏–Ω–∞', ignore_case=True), state='*')
    dp.register_callback_query_handler(empty_basket, text='empty_basket')
    dp.register_message_handler(ordering, Text(equals='–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', ignore_case=True), state='*')
    dp.register_callback_query_handler(place_order, text='place_order')
    dp.register_message_handler(place_order_recipient, state=FSMClient.recipient)
    dp.register_message_handler(place_order_address, state=FSMClient.address)
    dp.register_callback_query_handler(place_order_data, text='paid', state=FSMClient.address)


# @dp.message_handler(content_types=['contact'])
# async def contact(message: types.Message):
#     phone = message.contact.phone_number
#     await message.answer('PhoneNumber')
#     await message.answer(phone)

